SSEXY   (C) jbremer, Jurriaan Bremer 2012

        Introduction

Over the past few decades people have been Reverse Engineering binaries in
order to understand what they do, how they do it, and to find vulnerabilities.

In order to protect these binaries from third party reverse engineers, a lot
of research has been done regarding the obfuscation of binaries and their
internals.

In this presentation I will present an obfuscation based on x86 instructions
(these instructions represent everything the binary does, e.g. print a value
to the command line, calculate the length of a string, etc.)

Note that, by using obfuscation, it becomes harder to analyze a binary, and
therefore, it tries to keep attackers away from analyzing the binary. Thus
making it less likely that your favourite private algorithm will be exposed,
and/or vulnerabilities located.

        Current Approaches

Several techniques are being used in the wild which aid in obfuscation.
These include the following approaches:

- Virtual Machines;
    translate x86 into a custom instruction set, this forces a Reverse
    Engineer to learn the new instruction set, which is time consuming.

- Metamorphic Engines;
    rewrite an instruction to do the same, but with another
    representation, i.e. one instruction might be converted to 10 other
    instructions which result in the exact same output.

- Polymorphic Engines;
    encrypt the byte code of the instructions (the representation of x86
    instructions in a way that the CPU understands them) and decrypt them
    runtime, usually this is done by bruteforcing the key.

        What is SSE

SSE is an acronym for "Streaming SIMD Extensions", SIMD being "Single
Instruction, Multiple Data". Basically SSE is an extra Instruction Set on top of
the "regular" x86 instructions, it was made for vector math, to enhance speed in
3D gaming engines etc, although it can (obviously) be used for anything.

So what does this mean? There are more instructions than used in regular
binaries, this means that, as it is barely used, people are unfamiliar with the
SSE instruction set. We can use this to our advantage by transforming regular
instructions to an equivalent in SSE, therefore obfuscating the execution flow.

Note: Since some of the SSE instruction sets are relatively new (4.1, 4.2 and
5.0) they might not work on somewhat older CPUs, hence I only use instructions
from SSE and SSE2, which are supported since the Pentium 3 and 4 respectively,
so that should run on any modern computer.

        How does SSE work

SSE introduces dozens of new instructions to the existing x86 instruction set,
fortunately for me there are many semi-overlapping instructions (ie: there is an
add instruction in both x86 and SSE.) Due to this, almost all x86 instructions
can be translated into their SSE equivalent.

One could see SSE as a complete instruction set on it's own, if you omit a few
key features (such as branching.) This also means that SSE instructions operate
on their own registers, SSE has 8 XMM register and the best part of this is,
they are 128bit (16 bytes) in length. That's right, we can store four 32bit
integers in just one XMM register, I take advantage of this, as you will see
later on.

Other than that, SSE also has a few instructions to "communicate" with "normal
x86 instructions", for example one can load the lowest 32bits of an XMM register
from a GPR (General Purpose Register, x86's registers) and store the lowest
32bits of an XMM register into a GPR. Besides that the entire 128bits can be
stored to / loaded from an address that you can specify with GPRs.

        What does SSEXY do

So this SSEXY tool translates "regular" x86 assembly into SSE instructions, but
how does that work? So there are 8 GPRs, these are 32bit
registers that store stuff like intermediate values, stack pointers, return
values etc. But that's nice, 8 registers * 32 bits = 256 bits, this means
we can store all GPRs in just two XMM registers. So basically we emulate the
"normal" x86 instructions using SSE instructions.

Storing the GPRs as 32bit integers in XMM registers means that for every opcode
we will have to extract the values from the XMM registers and operate on them
from there, this gives us quite some overhead, but then again, this tool is not
made to decrease speed in execution time in existing binaries.

There are a few pitfalls, but almost all commonly (!) used instructions are
relatively easy to implement in SSE. For example, a lot of x86 instructions
(such as addition and subtracting instructions) set conditional flags which can
be used to jump somewhere else in the code, this is a bit harder to emulate in
SSE, but still doable.

        Overlap Existing Techniques

It may or may not have occurred to the reader that SSEXY is basically a new
way of obfuscation, introducing a combination of techniques from Virtual
Machines and Metamorphic Engines. This makes SSEXY very powerful,
obfuscation-wise.

        Tests

For my first presentation, at the Hack in the Box conference, I have developed
an initial version of SSEXY. This was merely to demonstrate the Proof of
Concept, and it's very, very limited. However, the results were already fairly
nice, e.g. IDA Pro simply fails to recognize all instructions, not to mention
graph view, or displaying basic blocks.

The existing presentation and sample binary can be found here;
http://jbremer.org/ssexy.zip

However, if accepted, I will develop the tool further. The idea is that it
should be able to handle a normal binary, i.e. any binary that was just
compiled and doesn't contain any weird stuff (such as embedded shellcode.)

        Cool stuff

A few observations, which make this tool (and research) interesting, in my
opinion:

- Static Analyzers break: they, most likely, lack support for SSE instructions

- Reverse Engineers will have headaches: "new" instruction set, there are no
    tools to automate processing it *yet* (see point 1), this extends the time
    it takes to analyze such binary

- Anti-Virus engines will fail: static analysis will most likely fail.

- (Potentially) defeating ROP exploits; I will talk about exploitability of a
    binary using the well-known ROP gadgets, if I'm not mistaken, ROP exploits
    will be a lot harder, but I'm not 100% sure about that yet.

        Improvements

Several improvements, on top of the "basic" features, include:

- Optimalizing instruction implementations; reducing amount of SSE
    instructions needed per x86 instruction (i.e. removing dead code)

- Shuffling the GPRs stored in XMM registers to obfuscate a bit

- Simple "encryption" of the GPRs stored in XMM registers (or even using
    different encryption keys depending on the function we are currently in,
    function as in a function in the C programming language)

- Combining several x86 instructions into a series of SSE instructions

- ... Whatever floats your boat ...

    Conclusion

I have proposed a relatively new way to obfuscate existing binaries and,
hopefully, a new way to fool Reverse Engineers, static analyzers and Anti Virus
engines.

Jurriaan Bremer, jbremer, jurriaanbremer@gmail.com
